# do this when a new issue is created
on:
  issues:
    types: [opened]
name: Create New Abstract

permissions:
  actions: read
  checks: read
  contents: read
  deployments: read
  issues: write
  discussions: read
  packages: read
  pages: read
  pull-requests: read
  repository-projects: read
  security-events: read
  statuses: read

jobs:
  check-user-access:
    if: contains(github.event.issue.labels.*.name, 'abstract')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # Get the github handle of the user and check it against the allowed_users.txt file
      - name: Get the user
        id: get_user
        run: echo "::set-output name=user::${{ github.event.issue.user.login }}"
      - name: Check user access
        id: check_user
        run: |
          user=${{ steps.get_user.outputs.user }}
          if ! grep -q $user allowed_users.txt; then
            echo "User $user is not allowed to create abstracts"
            gh issue close ${{ github.event.issue.number }} --comment "Issue closed: User $user is not allowed to create abstracts"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  generate-abstract:
    needs: check-user-access
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    # TODO: Replace with OIDC
    - name: Azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.MONDRIANMUSE_AZURE_CREDENTIALS }}
    # Escape double quotes in the issue body and set it as an environment variable
    - name: ‚õìÔ∏è‚Äçüí• Escape double quotes
      run: |
        echo "ESCAPED_ISSUE_BODY<<EOF" >> $GITHUB_ENV
        echo "${{ github.event.issue.body }}" | sed 's/"/\\"/g' >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
    # Create abstract and set the step output to the abstract
    - name: üìù Create an abstract
      env:
        AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
        ESCAPED_ISSUE_BODY: ${{ env.ESCAPED_ISSUE_BODY }}
      run: | 
        python create-abstract_promptflow.py --answers "$ESCAPED_ISSUE_BODY" > abstract.txt
    - run: gh issue comment $ISSUE --body "$(cat abstract.txt)"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ISSUE: ${{ github.event.issue.html_url }}
    - name: üîç Review the abstract
      env:
        AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
        ESCAPED_ISSUE_BODY: ${{ env.ESCAPED_ISSUE_BODY }}
      run: | 
        python review-abstract_promptflow.py --answers "$ESCAPED_ISSUE_BODY" --abstract "$(cat abstract.txt)" > review.txt
    - run: gh issue comment $ISSUE --body "$(cat review.txt)"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ISSUE: ${{ github.event.issue.html_url }}
    - name: üßê Critique the abstract
      env:
        AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
      run: | 
        python writing-critic_promptflow.py --abstract "$(cat abstract.txt)" > critique.txt
    - run: gh issue comment $ISSUE --body "$(cat critique.txt)"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ISSUE: ${{ github.event.issue.html_url }}
      
